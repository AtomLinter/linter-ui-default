{"version":3,"file":"dock.js","sourceRoot":"","sources":["../../lib/panel/dock.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable, Dock, WorkspaceCenter } from 'atom'\r\nimport { WORKSPACE_URI, DOCK_ALLOWED_LOCATIONS, DOCK_DEFAULT_LOCATION } from '../helpers'\r\nimport type Delegate from './delegate'\r\n\r\n// NOTE: these were lazy\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Component from './component'\r\n\r\n// TODO Make these API public\r\nexport type PaneContainer = Dock & {\r\n  state: { size: number }\r\n  render: Function\r\n  paneForItem: WorkspaceCenter['paneForItem']\r\n  location: string\r\n}\r\n\r\n// eslint-disable-next-line no-use-before-define\r\nfunction getPaneContainer(item: PanelDock): PaneContainer {\r\n  const paneContainer = atom.workspace.paneContainerForItem(item)\r\n  // NOTE: This is an internal API access\r\n  // It's necessary because there's no Public API for it yet\r\n  if (\r\n    paneContainer &&\r\n    // @ts-ignore internal API\r\n    typeof paneContainer.state === 'object' &&\r\n    // @ts-ignore internal API\r\n    typeof paneContainer.state.size === 'number' &&\r\n    // @ts-ignore internal API\r\n    typeof paneContainer.render === 'function'\r\n  ) {\r\n    // @ts-ignore internal API\r\n    return paneContainer as PaneContainer\r\n  }\r\n  return null\r\n}\r\n\r\nexport default class PanelDock {\r\n  element: HTMLElement\r\n  subscriptions: CompositeDisposable\r\n  panelHeight: number\r\n  alwaysTakeMinimumSpace: boolean\r\n  lastSetPaneHeight: number | null\r\n\r\n  constructor(delegate: Delegate) {\r\n    this.element = document.createElement('div')\r\n    this.subscriptions = new CompositeDisposable()\r\n\r\n    this.lastSetPaneHeight = null\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.panelHeight', panelHeight => {\r\n        const changed = typeof this.panelHeight === 'number'\r\n        this.panelHeight = panelHeight\r\n        if (changed) {\r\n          this.doPanelResize(true)\r\n        }\r\n      }),\r\n    )\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.alwaysTakeMinimumSpace', alwaysTakeMinimumSpace => {\r\n        this.alwaysTakeMinimumSpace = alwaysTakeMinimumSpace\r\n      }),\r\n    )\r\n    this.doPanelResize()\r\n    ReactDOM.render(<Component delegate={delegate} />, this.element)\r\n  }\r\n  // NOTE: Chose a name that won't conflict with Dock APIs\r\n  doPanelResize(forConfigHeight = false) {\r\n    const paneContainer = getPaneContainer(this)\r\n    let minimumHeight: number | null = null\r\n    const paneContainerView = atom.views.getView(paneContainer)\r\n    if (paneContainerView && this.alwaysTakeMinimumSpace) {\r\n      // NOTE: Super horrible hack but the only possible way I could find :((\r\n      const dockNamesElement = paneContainerView.querySelector('.list-inline.tab-bar.inset-panel')\r\n      const dockNamesRects = dockNamesElement ? dockNamesElement.getClientRects()[0] : null\r\n      const tableElement = this.element.querySelector('table')\r\n      const panelRects = tableElement ? tableElement.getClientRects()[0] : null\r\n      if (dockNamesRects && panelRects) {\r\n        minimumHeight = dockNamesRects.height + panelRects.height + 1\r\n      }\r\n    }\r\n\r\n    if (paneContainer) {\r\n      let updateConfigHeight: number | null = null\r\n      const heightSet =\r\n        minimumHeight !== null && !forConfigHeight ? Math.min(minimumHeight, this.panelHeight) : this.panelHeight\r\n\r\n      // Person resized the panel, save new resized value to config\r\n      if (this.lastSetPaneHeight !== null && paneContainer.state.size !== this.lastSetPaneHeight && !forConfigHeight) {\r\n        updateConfigHeight = paneContainer.state.size\r\n      }\r\n\r\n      this.lastSetPaneHeight = heightSet\r\n      paneContainer.state.size = heightSet\r\n      paneContainer.render(paneContainer.state)\r\n\r\n      if (updateConfigHeight !== null) {\r\n        atom.config.set('linter-ui-default.panelHeight', updateConfigHeight)\r\n      }\r\n    }\r\n  }\r\n  getURI() {\r\n    return WORKSPACE_URI\r\n  }\r\n  getTitle() {\r\n    return 'Linter'\r\n  }\r\n  getDefaultLocation() {\r\n    return DOCK_DEFAULT_LOCATION\r\n  }\r\n  getAllowedLocations() {\r\n    return DOCK_ALLOWED_LOCATIONS\r\n  }\r\n  getPreferredHeight() {\r\n    return atom.config.get('linter-ui-default.panelHeight')\r\n  }\r\n  dispose() {\r\n    this.subscriptions.dispose()\r\n    const paneContainer = getPaneContainer(this)\r\n    if (paneContainer && !this.alwaysTakeMinimumSpace && paneContainer.state.size !== this.panelHeight) {\r\n      atom.config.set('linter-ui-default.panelHeight', paneContainer.state.size)\r\n      paneContainer.paneForItem(this).destroyItem(this, true)\r\n    }\r\n  }\r\n}\r\n"]}