{"version":3,"file":"delegate.js","sourceRoot":"","sources":["../../lib/panel/delegate.ts"],"names":[],"mappings":";;AAAA,+BAAsE;AACtE,wCAA8F;AAG9F,MAAqB,aAAa;IAOhC;QANA,YAAO,GAAG,IAAI,cAAO,EAAoD,CAAA;QACzE,aAAQ,GAAyB,EAAE,CAAA;QACnC,qBAAgB,GAAyB,EAAE,CAAA;QAC3C,kBAAa,GAAwB,IAAI,0BAAmB,EAAE,CAAA;QAI5D,IAAI,kBAAkB,GAAsB,IAAI,CAAA;QAChD,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,mCAAmC,EAAE,eAAe,CAAC,EAAE;YACzE,MAAM,UAAU,GAAG,OAAO,IAAI,CAAC,eAAe,KAAK,WAAW,CAAA;YAC9D,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;YACtC,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,MAAM,EAAE,CAAA;aACd;QACH,CAAC,CAAC,EACF,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,qBAAqB,CAAC,GAAG,EAAE;YACpD,IAAI,kBAAkB,EAAE;gBACtB,kBAAkB,CAAC,OAAO,EAAE,CAAA;gBAC5B,kBAAkB,GAAG,IAAI,CAAA;aAC1B;YACD,MAAM,UAAU,GAAG,6BAAmB,EAAE,CAAA;YACxC,IAAI,UAAU,EAAE;gBACd,IAAI,IAAI,CAAC,eAAe,KAAK,gBAAgB,EAAE;oBAC7C,IAAI,CAAC,MAAM,EAAE,CAAA;iBACd;gBACD,IAAI,MAAM,GAAG,CAAC,CAAC,CAAA;gBACf,kBAAkB,GAAG,UAAU,CAAC,yBAAyB,CAAC,CAAC,EAAE,iBAAiB,EAAE,EAAE,EAAE;oBAClF,IAAI,MAAM,KAAK,iBAAiB,CAAC,GAAG,IAAI,IAAI,CAAC,eAAe,KAAK,cAAc,EAAE;wBAC/E,MAAM,GAAG,iBAAiB,CAAC,GAAG,CAAA;wBAC9B,IAAI,CAAC,MAAM,EAAE,CAAA;qBACd;gBACH,CAAC,CAAC,CAAA;aACH;YAED,IAAI,IAAI,CAAC,eAAe,KAAK,gBAAgB,IAAI,UAAU,EAAE;gBAC3D,IAAI,CAAC,MAAM,EAAE,CAAA;aACd;QACH,CAAC,CAAC,EACF,IAAI,iBAAU,CAAC;YACb,IAAI,kBAAkB,EAAE;gBACtB,kBAAkB,CAAC,OAAO,EAAE,CAAA;aAC7B;QACH,CAAC,CAAC,CACH,CAAA;IACH,CAAC;IACD,mBAAmB;QACjB,IAAI,gBAAgB,GAAyB,EAAE,CAAA;QAC/C,IAAI,IAAI,CAAC,eAAe,KAAK,gBAAgB,EAAE;YAC7C,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAA;SACjC;aAAM,IAAI,IAAI,CAAC,eAAe,KAAK,cAAc,EAAE;YAClD,MAAM,YAAY,GAAG,6BAAmB,EAAE,CAAA;YAC1C,IAAI,CAAC,YAAY;gBAAE,OAAO,EAAE,CAAA;YAC5B,gBAAgB,GAAG,wBAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,EAAE,CAAC,CAAA;SACzE;aAAM,IAAI,IAAI,CAAC,eAAe,KAAK,cAAc,EAAE;YAClD,MAAM,YAAY,GAAG,6BAAmB,EAAE,CAAA;YAC1C,IAAI,CAAC,YAAY;gBAAE,OAAO,EAAE,CAAA;YAC5B,MAAM,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAA;YAC9D,gBAAgB,GAAG,sCAA4B,CAC7C,IAAI,CAAC,QAAQ,EACb,YAAY,CAAC,OAAO,EAAE,EACtB,YAAK,CAAC,UAAU,CAAC;gBACf,CAAC,UAAU,EAAE,CAAC,CAAC;gBACf,CAAC,UAAU,EAAE,QAAQ,CAAC;aACvB,CAAC,CACH,CAAA;SACF;QACD,OAAO,gBAAgB,CAAA;IACzB,CAAC;IACD,MAAM,CAAC,WAAoD,IAAI;QAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;SACzB;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAA;IAC9D,CAAC;IACD,mBAAmB,CAAC,QAAkD;QACpE,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAA;IACtD,CAAC;IACD,OAAO;QACL,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAA;IAC9B,CAAC;CACF;AAnFD,gCAmFC","sourcesContent":["import { CompositeDisposable, Disposable, Emitter, Range } from 'atom'\r\nimport { getActiveTextEditor, filterMessages, filterMessagesByRangeOrPoint } from '../helpers'\r\nimport type { LinterMessage } from '../types'\r\n\r\nexport default class PanelDelegate {\r\n  emitter = new Emitter<{}, { 'observe-messages': Array<LinterMessage> }>() // eslint-disable-line @typescript-eslint/ban-types\r\n  messages: Array<LinterMessage> = []\r\n  filteredMessages: Array<LinterMessage> = []\r\n  subscriptions: CompositeDisposable = new CompositeDisposable()\r\n  panelRepresents?: 'Entire Project' | 'Current File' | 'Current Line'\r\n\r\n  constructor() {\r\n    let changeSubscription: Disposable | null = null\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.panelRepresents', panelRepresents => {\r\n        const notInitial = typeof this.panelRepresents !== 'undefined'\r\n        this.panelRepresents = panelRepresents\r\n        if (notInitial) {\r\n          this.update()\r\n        }\r\n      }),\r\n      atom.workspace.getCenter().observeActivePaneItem(() => {\r\n        if (changeSubscription) {\r\n          changeSubscription.dispose()\r\n          changeSubscription = null\r\n        }\r\n        const textEditor = getActiveTextEditor()\r\n        if (textEditor) {\r\n          if (this.panelRepresents !== 'Entire Project') {\r\n            this.update()\r\n          }\r\n          let oldRow = -1\r\n          changeSubscription = textEditor.onDidChangeCursorPosition(({ newBufferPosition }) => {\r\n            if (oldRow !== newBufferPosition.row && this.panelRepresents === 'Current Line') {\r\n              oldRow = newBufferPosition.row\r\n              this.update()\r\n            }\r\n          })\r\n        }\r\n\r\n        if (this.panelRepresents !== 'Entire Project' || textEditor) {\r\n          this.update()\r\n        }\r\n      }),\r\n      new Disposable(function () {\r\n        if (changeSubscription) {\r\n          changeSubscription.dispose()\r\n        }\r\n      }),\r\n    )\r\n  }\r\n  getFilteredMessages(): Array<LinterMessage> {\r\n    let filteredMessages: Array<LinterMessage> = []\r\n    if (this.panelRepresents === 'Entire Project') {\r\n      filteredMessages = this.messages\r\n    } else if (this.panelRepresents === 'Current File') {\r\n      const activeEditor = getActiveTextEditor()\r\n      if (!activeEditor) return []\r\n      filteredMessages = filterMessages(this.messages, activeEditor.getPath())\r\n    } else if (this.panelRepresents === 'Current Line') {\r\n      const activeEditor = getActiveTextEditor()\r\n      if (!activeEditor) return []\r\n      const activeLine = activeEditor.getCursors()[0].getBufferRow()\r\n      filteredMessages = filterMessagesByRangeOrPoint(\r\n        this.messages,\r\n        activeEditor.getPath(),\r\n        Range.fromObject([\r\n          [activeLine, 0],\r\n          [activeLine, Infinity],\r\n        ]),\r\n      )\r\n    }\r\n    return filteredMessages\r\n  }\r\n  update(messages: Array<LinterMessage> | null | undefined = null): void {\r\n    if (Array.isArray(messages)) {\r\n      this.messages = messages\r\n    }\r\n    this.filteredMessages = this.getFilteredMessages()\r\n    this.emitter.emit('observe-messages', this.filteredMessages)\r\n  }\r\n  onDidChangeMessages(callback: (messages: Array<LinterMessage>) => void): Disposable {\r\n    return this.emitter.on('observe-messages', callback)\r\n  }\r\n  dispose() {\r\n    this.subscriptions.dispose()\r\n  }\r\n}\r\n"]}