{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/panel/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable } from 'atom'\r\nimport Delegate from './delegate'\r\nimport PanelDock from './dock'\r\nimport type { LinterMessage } from '../types'\r\nimport type { PaneContainer } from './dock'\r\n\r\nexport default class Panel {\r\n  panel: PanelDock | null\r\n  element: HTMLElement\r\n  delegate: Delegate\r\n  messages: Array<LinterMessage>\r\n  deactivating: boolean\r\n  subscriptions: CompositeDisposable\r\n  showPanelConfig: boolean\r\n  hidePanelWhenEmpty: boolean\r\n  showPanelStateMessages: boolean\r\n  activationTimer: number\r\n  constructor() {\r\n    this.panel = null\r\n    this.element = document.createElement('div')\r\n    this.delegate = new Delegate()\r\n    this.messages = []\r\n    this.deactivating = false\r\n    this.subscriptions = new CompositeDisposable()\r\n    this.showPanelStateMessages = false\r\n\r\n    this.subscriptions.add(this.delegate)\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.hidePanelWhenEmpty', hidePanelWhenEmpty => {\r\n        this.hidePanelWhenEmpty = hidePanelWhenEmpty\r\n        this.refresh()\r\n      }),\r\n    )\r\n    this.subscriptions.add(\r\n      atom.workspace.onDidDestroyPane(({ pane: destroyedPane }) => {\r\n        const isPaneItemDestroyed = destroyedPane.getItems().includes(this.panel)\r\n        if (isPaneItemDestroyed && !this.deactivating) {\r\n          this.panel = null\r\n          atom.config.set('linter-ui-default.showPanel', false)\r\n        }\r\n      }),\r\n    )\r\n    this.subscriptions.add(\r\n      atom.workspace.onDidDestroyPaneItem(({ item: paneItem }) => {\r\n        if (paneItem instanceof PanelDock && !this.deactivating) {\r\n          this.panel = null\r\n          atom.config.set('linter-ui-default.showPanel', false)\r\n        }\r\n      }),\r\n    )\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.showPanel', showPanel => {\r\n        this.showPanelConfig = showPanel\r\n        this.refresh()\r\n      }),\r\n    )\r\n    this.subscriptions.add(\r\n      atom.workspace.getCenter().observeActivePaneItem(() => {\r\n        this.showPanelStateMessages = !!this.delegate.filteredMessages.length\r\n        this.refresh()\r\n      }),\r\n    )\r\n    this.activationTimer = window.requestIdleCallback(() => {\r\n      let firstTime = true\r\n      const dock = atom.workspace.getBottomDock()\r\n      this.subscriptions.add(\r\n        dock.onDidChangeActivePaneItem(paneItem => {\r\n          if (!this.panel || this.getPanelLocation() !== 'bottom') {\r\n            return\r\n          }\r\n          if (firstTime) {\r\n            firstTime = false\r\n            return\r\n          }\r\n          const isFocusIn = paneItem === this.panel\r\n          const externallyToggled = isFocusIn !== this.showPanelConfig\r\n          if (externallyToggled) {\r\n            atom.config.set('linter-ui-default.showPanel', !this.showPanelConfig)\r\n          }\r\n        }),\r\n      )\r\n      this.subscriptions.add(\r\n        dock.onDidChangeVisible(visible => {\r\n          if (!this.panel || this.getPanelLocation() !== 'bottom') {\r\n            return\r\n          }\r\n          if (!visible) {\r\n            // ^ When it's time to tell config to hide\r\n            if (this.showPanelConfig && this.hidePanelWhenEmpty && !this.showPanelStateMessages) {\r\n              // Ignore because we just don't have any messages to show, everything else is fine\r\n              return\r\n            }\r\n          }\r\n          if (dock.getActivePaneItem() !== this.panel) {\r\n            // Ignore since the visibility of this panel is not changing\r\n            return\r\n          }\r\n          const externallyToggled = visible !== this.showPanelConfig\r\n          if (externallyToggled) {\r\n            atom.config.set('linter-ui-default.showPanel', !this.showPanelConfig)\r\n          }\r\n        }),\r\n      )\r\n\r\n      this.activate()\r\n    })\r\n  }\r\n  getPanelLocation() {\r\n    if (!this.panel) {\r\n      return null\r\n    }\r\n    // @ts-ignore internal API\r\n    const paneContainer: PaneContainer = atom.workspace.paneContainerForItem(this.panel)\r\n    return (paneContainer && paneContainer.location) || null\r\n  }\r\n  async activate() {\r\n    if (this.panel) {\r\n      return\r\n    }\r\n    this.panel = new PanelDock(this.delegate)\r\n    await atom.workspace.open(this.panel, {\r\n      activatePane: false,\r\n      activateItem: false,\r\n      searchAllPanes: true,\r\n    })\r\n    this.update()\r\n    this.refresh()\r\n  }\r\n  update(newMessages: Array<LinterMessage> | null | undefined = null): void {\r\n    if (newMessages) {\r\n      this.messages = newMessages\r\n    }\r\n    this.delegate.update(this.messages)\r\n    this.showPanelStateMessages = !!this.delegate.filteredMessages.length\r\n    this.refresh()\r\n  }\r\n  async refresh() {\r\n    const panel = this.panel\r\n    if (panel === null) {\r\n      if (this.showPanelConfig) {\r\n        await this.activate()\r\n      }\r\n      return\r\n    }\r\n    // @ts-ignore internal API\r\n    const paneContainer: PaneContainer = atom.workspace.paneContainerForItem(panel)\r\n    if (!paneContainer || paneContainer.location !== 'bottom') {\r\n      return\r\n    }\r\n    const isActivePanel = paneContainer.getActivePaneItem() === panel\r\n    const visibilityAllowed1 = this.showPanelConfig\r\n    const visibilityAllowed2 = this.hidePanelWhenEmpty ? this.showPanelStateMessages : true\r\n    if (visibilityAllowed1 && visibilityAllowed2) {\r\n      if (!isActivePanel) {\r\n        paneContainer.paneForItem(panel).activateItem(panel)\r\n      }\r\n      paneContainer.show()\r\n      panel.doPanelResize()\r\n    } else if (isActivePanel) {\r\n      paneContainer.hide()\r\n    }\r\n  }\r\n  dispose() {\r\n    this.deactivating = true\r\n    if (this.panel) {\r\n      this.panel.dispose()\r\n    }\r\n    this.subscriptions.dispose()\r\n    window.cancelIdleCallback(this.activationTimer)\r\n  }\r\n}\r\n"]}