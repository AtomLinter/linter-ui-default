{"version":3,"file":"main.js","sourceRoot":"","sources":["../lib/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable } from 'atom'\r\nimport Panel from './panel'\r\nimport Commands from './commands'\r\nimport StatusBar from './status-bar'\r\nimport BusySignal from './busy-signal'\r\nimport Intentions from './intentions'\r\nimport type { Linter, LinterMessage, MessagesPatch } from './types'\r\n\r\nimport Editors from './editors'\r\nimport TreeView from './tree-view'\r\n\r\nexport default class LinterUI {\r\n  name: string = 'Linter'\r\n  panel?: Panel\r\n  signal: BusySignal = new BusySignal()\r\n  editors: Editors | null | undefined\r\n  treeview?: TreeView\r\n  commands: Commands = new Commands()\r\n  messages: Array<LinterMessage> = []\r\n  statusBar: StatusBar = new StatusBar()\r\n  intentions: Intentions = new Intentions()\r\n  subscriptions: CompositeDisposable = new CompositeDisposable()\r\n  idleCallbacks: Set<number> = new Set()\r\n\r\n  constructor() {\r\n    this.subscriptions.add(this.signal, this.commands, this.statusBar)\r\n\r\n    const obsShowPanelCB = window.requestIdleCallback(\r\n      /* observeShowPanel */ () => {\r\n        this.idleCallbacks.delete(obsShowPanelCB)\r\n        this.panel = new Panel()\r\n        this.panel.update(this.messages)\r\n      },\r\n    )\r\n    this.idleCallbacks.add(obsShowPanelCB)\r\n\r\n    const obsShowDecorationsCB = window.requestIdleCallback(\r\n      /* observeShowDecorations */ () => {\r\n        this.idleCallbacks.delete(obsShowDecorationsCB)\r\n        this.subscriptions.add(\r\n          atom.config.observe('linter-ui-default.showDecorations', showDecorations => {\r\n            if (showDecorations && !this.editors) {\r\n              this.editors = new Editors()\r\n              this.editors.update({\r\n                added: this.messages,\r\n                removed: [],\r\n                messages: this.messages,\r\n              })\r\n            } else if (!showDecorations && this.editors) {\r\n              this.editors.dispose()\r\n              this.editors = null\r\n            }\r\n          }),\r\n        )\r\n      },\r\n    )\r\n    this.idleCallbacks.add(obsShowDecorationsCB)\r\n  }\r\n  render(difference: MessagesPatch) {\r\n    const editors = this.editors\r\n\r\n    this.messages = difference.messages\r\n    if (editors) {\r\n      if (editors.isFirstRender()) {\r\n        editors.update({\r\n          added: difference.messages,\r\n          removed: [],\r\n          messages: difference.messages,\r\n        })\r\n      } else {\r\n        editors.update(difference)\r\n      }\r\n    }\r\n    // Initialize the TreeView subscription if necessary\r\n    if (!this.treeview) {\r\n      this.treeview = new TreeView()\r\n      this.subscriptions.add(this.treeview)\r\n    }\r\n    this.treeview.update(difference.messages)\r\n\r\n    if (this.panel) {\r\n      this.panel.update(difference.messages)\r\n    }\r\n    this.commands.update(difference.messages)\r\n    this.intentions.update(difference.messages)\r\n    this.statusBar.update(difference.messages)\r\n  }\r\n  didBeginLinting(linter: Linter, filePath: string) {\r\n    this.signal.didBeginLinting(linter, filePath)\r\n  }\r\n  didFinishLinting(linter: Linter, filePath: string) {\r\n    this.signal.didFinishLinting(linter, filePath)\r\n  }\r\n  dispose() {\r\n    this.idleCallbacks.forEach(callbackID => window.cancelIdleCallback(callbackID))\r\n    this.idleCallbacks.clear()\r\n    this.subscriptions.dispose()\r\n    if (this.panel) {\r\n      this.panel.dispose()\r\n    }\r\n    if (this.editors) {\r\n      this.editors.dispose()\r\n    }\r\n  }\r\n}\r\n"]}