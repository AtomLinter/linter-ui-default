{"version":3,"file":"index.jsx","sourceRoot":"","sources":["../../lib/tooltip/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render } from 'solid-js/web'\r\nimport type * as Solid from 'solid-js'\r\nimport { CompositeDisposable, Emitter } from 'atom'\r\nimport type { Disposable, Point, TextEditor, DisplayMarker } from 'atom'\r\nimport Delegate from './delegate'\r\nimport MessageElement from './message'\r\nimport { $range } from '../helpers'\r\nimport type { LinterMessage } from '../types'\r\n\r\nexport default class TooltipElement {\r\n  marker: DisplayMarker\r\n  element: HTMLElement = document.createElement('div')\r\n  emitter = new Emitter<{ 'did-destroy': never }>()\r\n  messages: Array<LinterMessage>\r\n  subscriptions: CompositeDisposable = new CompositeDisposable()\r\n\r\n  constructor(messages: Array<LinterMessage>, position: Point, textEditor: TextEditor) {\r\n    this.messages = messages\r\n    this.marker = textEditor.markBufferRange([position, position])\r\n    this.marker.onDidDestroy(() => this.emitter.emit('did-destroy'))\r\n\r\n    const delegate = new Delegate()\r\n    this.element.id = 'linter-tooltip'\r\n    textEditor.decorateMarker(this.marker, {\r\n      type: 'overlay',\r\n      item: this.element,\r\n    })\r\n\r\n    this.subscriptions.add(this.emitter, delegate)\r\n\r\n    const children: Array<Solid.JSX.Element> = []\r\n    messages.forEach(message => {\r\n      if (message.version === 2) {\r\n        children.push(<MessageElement key={message.key} delegate={delegate} message={message} />)\r\n      }\r\n    })\r\n    render(() => <div className=\"linter-messages\">{children}</div>, this.element)\r\n\r\n    // move box above the current editing line\r\n    // HACK: patch the decoration's style so it is shown above the current line\r\n    setTimeout(() => {\r\n      const hight = this.element.getBoundingClientRect().height\r\n      const lineHight = textEditor.getLineHeightInPixels()\r\n      // @ts-ignore: internal API\r\n      const availableHight = (position.row - textEditor.getFirstVisibleScreenRow()) * lineHight\r\n      if (hight < availableHight) {\r\n        const overlay = this.element.parentElement\r\n        if (overlay) {\r\n          overlay.style.transform = `translateY(-${2 + lineHight + hight}px)`\r\n        }\r\n        // TODO:\r\n        // } else {\r\n        // // // move right so it does not overlap with datatip-overlay\"\r\n        // const dataTip = textEditor.getElement().querySelector(\".datatip-overlay\")\r\n        // if (dataTip) {\r\n        //   this.element.style.left = dataTip.clientWidth + \"px\"\r\n        // }\r\n      }\r\n      this.element.style.visibility = 'visible'\r\n    }, 50)\r\n  }\r\n  isValid(position: Point, messages: Map<string, LinterMessage>): boolean {\r\n    if (this.messages.length !== 1 || !messages.has(this.messages[0].key)) {\r\n      return false\r\n    }\r\n    const range = $range(this.messages[0])\r\n    return Boolean(range && range.containsPoint(position))\r\n  }\r\n  onDidDestroy(callback: () => void): Disposable {\r\n    return this.emitter.on('did-destroy', callback)\r\n  }\r\n  dispose() {\r\n    this.emitter.emit('did-destroy')\r\n    this.subscriptions.dispose()\r\n  }\r\n}\r\n"]}