{"version":3,"file":"delegate.js","sourceRoot":"","sources":["../../lib/tooltip/delegate.ts"],"names":[],"mappings":";;AAAA,+BAAmD;AAGnD,MAAqB,eAAe;IAUlC;QATA,YAAO,GAAY,IAAI,cAAO,EAI1B,CAAA;QACJ,aAAQ,GAAY,KAAK,CAAA;QACzB,kBAAa,GAAwB,IAAI,0BAAmB,EAAE,CAAA;QAI5D,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oCAAoC,EAAE,gBAAgB,CAAC,EAAE;YAC3E,MAAM,YAAY,GAAG,OAAO,IAAI,CAAC,gBAAgB,KAAK,WAAW,CAAA;YACjE,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;YACxC,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;aACnC;QACH,CAAC,CAAC,EACF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE;YAClC,kCAAkC,EAAE,KAAK,CAAC,EAAE;;gBAC1C,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,OAAM;iBACP;gBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;gBACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;gBAGlC,UAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,aAAa,0CAAE,SAAS,EAAE;oBAEnC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAC5B,OAAO,EACP,SAAS,aAAa;wBAEpB,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;wBACzD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,oCAAoC,CAAC,CAAA;oBAClG,CAAC,EACD,EAAE,OAAO,EAAE,IAAI,EAAE,CAClB,CAAA;iBACF;YACH,CAAC;YACD,oCAAoC,EAAE,GAAG,EAAE;gBACzC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;gBACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;YACtC,CAAC;SACF,CAAC,CACH,CAAA;IACH,CAAC;IACD,cAAc,CAAC,QAAoB;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAA;IACnD,CAAC;IACD,cAAc,CAAC,QAAoB;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAA;IACnD,CAAC;IACD,gBAAgB,CAAC,QAAoB;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAA;IACrD,CAAC;IACD,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;IACxB,CAAC;CACF;AA7DD,kCA6DC","sourcesContent":["import { CompositeDisposable, Emitter } from 'atom'\r\nimport type { Disposable } from 'atom'\r\n\r\nexport default class TooltipDelegate {\r\n  emitter: Emitter = new Emitter<{\r\n    'should-update': never\r\n    'should-expand': never\r\n    'should-collapse': never\r\n  }>()\r\n  expanded: boolean = false\r\n  subscriptions: CompositeDisposable = new CompositeDisposable()\r\n  showProviderName?: boolean\r\n\r\n  constructor() {\r\n    this.subscriptions.add(\r\n      this.emitter,\r\n      atom.config.observe('linter-ui-default.showProviderName', showProviderName => {\r\n        const shouldUpdate = typeof this.showProviderName !== 'undefined'\r\n        this.showProviderName = showProviderName\r\n        if (shouldUpdate) {\r\n          this.emitter.emit('should-update')\r\n        }\r\n      }),\r\n      atom.commands.add('atom-workspace', {\r\n        'linter-ui-default:expand-tooltip': event => {\r\n          if (this.expanded) {\r\n            return\r\n          }\r\n          this.expanded = true\r\n          this.emitter.emit('should-expand')\r\n\r\n          // If bound to a key, collapse when that key is released, just like old times\r\n          if (event?.originalEvent?.isTrusted) {\r\n            // $FlowIgnore: document.body is never null\r\n            document.body.addEventListener(\r\n              'keyup',\r\n              function eventListener() {\r\n                // $FlowIgnore: document.body is never null\r\n                document.body.removeEventListener('keyup', eventListener)\r\n                atom.commands.dispatch(atom.views.getView(atom.workspace), 'linter-ui-default:collapse-tooltip')\r\n              },\r\n              { passive: true },\r\n            )\r\n          }\r\n        },\r\n        'linter-ui-default:collapse-tooltip': () => {\r\n          this.expanded = false\r\n          this.emitter.emit('should-collapse')\r\n        },\r\n      }),\r\n    )\r\n  }\r\n  onShouldUpdate(callback: () => void): Disposable {\r\n    return this.emitter.on('should-update', callback)\r\n  }\r\n  onShouldExpand(callback: () => void): Disposable {\r\n    return this.emitter.on('should-expand', callback)\r\n  }\r\n  onShouldCollapse(callback: () => void): Disposable {\r\n    return this.emitter.on('should-collapse', callback)\r\n  }\r\n  dispose() {\r\n    this.emitter.dispose()\r\n  }\r\n}\r\n"]}