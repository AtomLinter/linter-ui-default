{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../lib/tree-view/helpers.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAuB;AACvB,wCAAkC;AAGlC,SAAgB,SAAS,CAAC,QAAgB,EAAE,WAAmB;IAC7D,MAAM,QAAQ,GAAkB,EAAE,CAAA;IAClC,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAI,CAAC,GAAG,CAAC,CAAA;IACvC,OAAO,MAAM,CAAC,MAAM,EAAE;QACpB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,cAAI,CAAC,GAAG,CAAC,CAAA;QACzC,IAAI,WAAW,EAAE;YAGf,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC1B,IAAI,WAAW,KAAK,WAAW,EAAE;gBAC/B,MAAK;aACN;SACF;QACD,MAAM,CAAC,GAAG,EAAE,CAAA;KACb;IACD,OAAO,QAAQ,CAAA;AACjB,CAAC;AAhBD,8BAgBC;AAED,SAAgB,mBAAmB,CAAC,QAAgB,EAAE,YAA2B;IAC/E,MAAM,mBAAmB,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1E,IAAI,CAAC,mBAAmB,EAAE;QACxB,OAAO,CAAC,QAAQ,CAAC,CAAA;KAClB;IACD,OAAO,SAAS,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAA;AACjD,CAAC;AAND,kDAMC;AAED,SAAgB,WAAW,CAAC,MAAyC,EAAE,QAAgB,EAAE,QAAgB;IACvG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;QACrB,MAAM,CAAC,QAAQ,CAAC,GAAG;YACjB,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,KAAK;SACf,CAAA;KACF;IACD,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAA;AACnC,CAAC;AATD,kCASC;AAED,SAAgB,oBAAoB,CAClC,kBAAiE,EACjE,QAA8B;IAE9B,MAAM,QAAQ,GAAG,EAAE,CAAA;IACnB,MAAM,YAAY,GAAkB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAA;IAC3D,QAAQ,CAAC,OAAO,CAAC,UAAU,OAAO;QAChC,MAAM,QAAQ,GAAG,eAAK,CAAC,OAAO,CAAC,CAAA;QAC/B,IAAI,QAAQ,EAAE;YACZ,MAAM,MAAM,GAAG,kBAAkB,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAA;YACxG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA;SACxE;IACH,CAAC,CAAC,CAAA;IACF,OAAO,QAAQ,CAAA;AACjB,CAAC;AAdD,oDAcC","sourcesContent":["import Path from 'path'\r\nimport { $file } from '../helpers'\r\nimport type { LinterMessage, TreeViewHighlight } from '../types'\r\n\r\nexport function getChunks(filePath: string, projectPath: string): Array<string> {\r\n  const toReturn: Array<string> = []\r\n  const chunks = filePath.split(Path.sep)\r\n  while (chunks.length) {\r\n    const currentPath = chunks.join(Path.sep)\r\n    if (currentPath) {\r\n      // This is required for when you open files outside of project window\r\n      // and the last entry is '' because unix paths start with /\r\n      toReturn.push(currentPath)\r\n      if (currentPath === projectPath) {\r\n        break\r\n      }\r\n    }\r\n    chunks.pop()\r\n  }\r\n  return toReturn\r\n}\r\n\r\nexport function getChunksByProjects(filePath: string, projectPaths: Array<string>): Array<string> {\r\n  const matchingProjectPath = projectPaths.find(p => filePath.startsWith(p))\r\n  if (!matchingProjectPath) {\r\n    return [filePath]\r\n  }\r\n  return getChunks(filePath, matchingProjectPath)\r\n}\r\n\r\nexport function mergeChange(change: Record<string, TreeViewHighlight>, filePath: string, severity: string): void {\r\n  if (!change[filePath]) {\r\n    change[filePath] = {\r\n      info: false,\r\n      error: false,\r\n      warning: false,\r\n    }\r\n  }\r\n  change[filePath][severity] = true\r\n}\r\n\r\nexport function calculateDecorations(\r\n  decorateOnTreeView: 'Files and Directories' | 'Files' | undefined,\r\n  messages: Array<LinterMessage>,\r\n): Record<string, TreeViewHighlight> {\r\n  const toReturn = {}\r\n  const projectPaths: Array<string> = atom.project.getPaths()\r\n  messages.forEach(function (message) {\r\n    const filePath = $file(message)\r\n    if (filePath) {\r\n      const chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths)\r\n      chunks.forEach(chunk => mergeChange(toReturn, chunk, message.severity))\r\n    }\r\n  })\r\n  return toReturn\r\n}\r\n"]}