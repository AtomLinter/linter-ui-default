{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/tree-view/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable } from 'atom'\r\nimport debounce from 'lodash/debounce'\r\nimport disposableEvent from 'disposable-event'\r\nimport { calculateDecorations } from './helpers'\r\nimport type { LinterMessage, TreeViewHighlight } from '../types'\r\n\r\nexport default class TreeView {\r\n  messages: Array<LinterMessage> = []\r\n  decorations: Record<string, TreeViewHighlight> = {}\r\n  subscriptions: CompositeDisposable = new CompositeDisposable()\r\n  decorateOnTreeView?: 'Files and Directories' | 'Files' | 'None'\r\n\r\n  constructor() {\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.decorateOnTreeView', decorateOnTreeView => {\r\n        if (typeof this.decorateOnTreeView === 'undefined') {\r\n          this.decorateOnTreeView = decorateOnTreeView\r\n        } else if (decorateOnTreeView === 'None') {\r\n          this.update([])\r\n          this.decorateOnTreeView = decorateOnTreeView\r\n        } else {\r\n          const messages = this.messages\r\n          this.decorateOnTreeView = decorateOnTreeView\r\n          this.update(messages)\r\n        }\r\n      }),\r\n    )\r\n\r\n    setTimeout(() => {\r\n      const element = TreeView.getElement()\r\n      if (!element) {\r\n        return\r\n      }\r\n      // Subscription is only added if the CompositeDisposable hasn't been disposed\r\n      this.subscriptions.add(\r\n        disposableEvent(\r\n          element,\r\n          'click',\r\n          debounce(() => {\r\n            this.update()\r\n          }),\r\n          { passive: true },\r\n        ),\r\n      )\r\n    }, 100)\r\n  }\r\n  update(givenMessages: Array<LinterMessage> | null | undefined = null) {\r\n    if (Array.isArray(givenMessages)) {\r\n      this.messages = givenMessages\r\n    }\r\n    const messages = this.messages\r\n\r\n    const element = TreeView.getElement()\r\n    const decorateOnTreeView = this.decorateOnTreeView\r\n    if (!element || decorateOnTreeView === 'None') {\r\n      return\r\n    }\r\n\r\n    this.applyDecorations(calculateDecorations(decorateOnTreeView, messages))\r\n  }\r\n  applyDecorations(decorations: Record<string, TreeViewHighlight>) {\r\n    const treeViewElement = TreeView.getElement()\r\n    if (!treeViewElement) {\r\n      return\r\n    }\r\n\r\n    const elementCache = {}\r\n    const appliedDecorations = {}\r\n\r\n    Object.keys(this.decorations).forEach(filePath => {\r\n      if (!{}.hasOwnProperty.call(this.decorations, filePath)) {\r\n        return\r\n      }\r\n      if (!decorations[filePath]) {\r\n        // Removed\r\n        const element =\r\n          elementCache[filePath] || (elementCache[filePath] = TreeView.getElementByPath(treeViewElement, filePath))\r\n        if (element) {\r\n          this.removeDecoration(element)\r\n        }\r\n      }\r\n    })\r\n\r\n    Object.keys(decorations).forEach(filePath => {\r\n      if (!{}.hasOwnProperty.call(decorations, filePath)) {\r\n        return\r\n      }\r\n      const element =\r\n        elementCache[filePath] || (elementCache[filePath] = TreeView.getElementByPath(treeViewElement, filePath))\r\n      if (element) {\r\n        this.handleDecoration(element, !!this.decorations[filePath], decorations[filePath])\r\n        appliedDecorations[filePath] = decorations[filePath]\r\n      }\r\n    })\r\n\r\n    this.decorations = appliedDecorations\r\n  }\r\n\r\n  handleDecoration(element: HTMLElement, update = false, highlights: TreeViewHighlight) {\r\n    let decoration: HTMLElement | null = null\r\n    if (update) {\r\n      decoration = element.querySelector('linter-decoration')\r\n    }\r\n    if (decoration !== null) {\r\n      decoration.className = ''\r\n    } else {\r\n      decoration = document.createElement('linter-decoration')\r\n      element.appendChild(decoration)\r\n    }\r\n    if (highlights.error) {\r\n      decoration.classList.add('linter-error')\r\n    } else if (highlights.warning) {\r\n      decoration.classList.add('linter-warning')\r\n    } else if (highlights.info) {\r\n      decoration.classList.add('linter-info')\r\n    }\r\n  }\r\n  removeDecoration(element: HTMLElement) {\r\n    const decoration = element.querySelector('linter-decoration')\r\n    if (decoration) {\r\n      decoration.remove()\r\n    }\r\n  }\r\n  dispose() {\r\n    this.subscriptions.dispose()\r\n  }\r\n  static getElement(): HTMLElement | null {\r\n    return document.querySelector('.tree-view')\r\n  }\r\n  static getElementByPath(parent: HTMLElement, filePath: string): HTMLElement | null {\r\n    return parent.querySelector(`[data-path=${CSS.escape(filePath)}]`)\r\n  }\r\n}\r\n"]}