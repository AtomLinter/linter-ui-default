{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/status-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable, Disposable } from 'atom'\r\nimport type { StatusBar as StatusBarRegistry, Tile as StatusBarTile } from 'atom/status-bar'\r\nimport Element from './element'\r\nimport { $file, getActiveTextEditor } from '../helpers'\r\nimport type { LinterMessage } from '../types'\r\n\r\nexport default class StatusBar {\r\n  element: Element = new Element()\r\n  messages: Array<LinterMessage> = []\r\n  subscriptions: CompositeDisposable = new CompositeDisposable()\r\n  statusBarRepresents?: 'Entire Project' | 'Current File'\r\n  statusBarClickBehavior?: 'Toggle Panel' | 'Jump to next issue' | 'Toggle Status Bar Scope'\r\n\r\n  constructor() {\r\n    this.subscriptions.add(\r\n      this.element,\r\n      atom.config.observe('linter-ui-default.statusBarRepresents', statusBarRepresents => {\r\n        const notInitial = typeof this.statusBarRepresents !== 'undefined'\r\n        this.statusBarRepresents = statusBarRepresents\r\n        if (notInitial) {\r\n          this.update()\r\n        }\r\n      }),\r\n      atom.config.observe('linter-ui-default.statusBarClickBehavior', statusBarClickBehavior => {\r\n        const notInitial = typeof this.statusBarClickBehavior !== 'undefined'\r\n        this.statusBarClickBehavior = statusBarClickBehavior\r\n        if (notInitial) {\r\n          this.update()\r\n        }\r\n      }),\r\n      atom.config.observe('linter-ui-default.showStatusBar', showStatusBar => {\r\n        this.element.setVisibility('config', showStatusBar)\r\n      }),\r\n      atom.workspace.getCenter().observeActivePaneItem(paneItem => {\r\n        const isTextEditor = atom.workspace.isTextEditor(paneItem)\r\n        this.element.setVisibility('pane', isTextEditor)\r\n        if (isTextEditor && this.statusBarRepresents === 'Current File') {\r\n          this.update()\r\n        }\r\n      }),\r\n    )\r\n\r\n    this.element.onDidClick(type => {\r\n      const workspaceView = atom.views.getView(atom.workspace)\r\n      if (this.statusBarClickBehavior === 'Toggle Panel') {\r\n        atom.commands.dispatch(workspaceView, 'linter-ui-default:toggle-panel')\r\n      } else if (this.statusBarClickBehavior === 'Toggle Status Bar Scope') {\r\n        atom.config.set(\r\n          'linter-ui-default.statusBarRepresents',\r\n          this.statusBarRepresents === 'Entire Project' ? 'Current File' : 'Entire Project',\r\n        )\r\n      } else {\r\n        const postfix = this.statusBarRepresents === 'Current File' ? '-in-current-file' : ''\r\n        atom.commands.dispatch(workspaceView, `linter-ui-default:next-${type}${postfix}`)\r\n      }\r\n    })\r\n  }\r\n  update(messages: Array<LinterMessage> | null | undefined = null): void {\r\n    if (messages) {\r\n      this.messages = messages\r\n    } else {\r\n      messages = this.messages\r\n    }\r\n\r\n    const count = { error: 0, warning: 0, info: 0 }\r\n    const currentTextEditor = getActiveTextEditor()\r\n    const currentPath = (currentTextEditor && currentTextEditor.getPath()) || NaN\r\n    // NOTE: ^ Setting default to NaN so it won't match empty file paths in messages\r\n\r\n    messages.forEach(message => {\r\n      if (this.statusBarRepresents === 'Entire Project' || $file(message) === currentPath) {\r\n        if (message.severity === 'error') {\r\n          count.error++\r\n        } else if (message.severity === 'warning') {\r\n          count.warning++\r\n        } else {\r\n          count.info++\r\n        }\r\n      }\r\n    })\r\n    this.element.update(count.error, count.warning, count.info)\r\n  }\r\n  attach(statusBarRegistry: StatusBarRegistry) {\r\n    let statusBar: StatusBarTile | null = null\r\n\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.statusBarPosition', statusBarPosition => {\r\n        if (statusBar) {\r\n          statusBar.destroy()\r\n        }\r\n        statusBar = statusBarRegistry[`add${statusBarPosition}Tile`]({\r\n          item: this.element.item,\r\n          priority: statusBarPosition === 'Left' ? 0 : 1000,\r\n        })\r\n      }),\r\n    )\r\n    this.subscriptions.add(\r\n      new Disposable(function () {\r\n        if (statusBar) {\r\n          statusBar.destroy()\r\n        }\r\n      }),\r\n    )\r\n  }\r\n  dispose() {\r\n    this.subscriptions.dispose()\r\n  }\r\n}\r\n"]}