{"version":3,"file":"intentions.js","sourceRoot":"","sources":["../lib/intentions.ts"],"names":[],"mappings":";;AAAA,uCAAiE;AAIjE,MAAqB,UAAU;IAA/B;QACE,aAAQ,GAAyB,EAAE,CAAA;QACnC,kBAAa,GAAkB,CAAC,GAAG,CAAC,CAAA;IAuCtC,CAAC;IArCC,aAAa,CAAC,EAAE,UAAU,EAAE,cAAc,EAAqD;QAC7F,IAAI,UAAU,GAAe,EAAE,CAAA;QAC/B,MAAM,QAAQ,GAAG,wBAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,OAAO,EAAE,CAAC,CAAA;QAEpE,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAA;YAC9D,IAAI,CAAC,QAAQ,EAAE;gBACb,SAAQ;aACT;YACD,MAAM,KAAK,GAAG,gBAAM,CAAC,OAAO,CAAC,CAAA;YAC7B,MAAM,OAAO,GAAG,KAAK,IAAI,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA;YAC5D,IAAI,CAAC,OAAO,EAAE;gBACZ,SAAQ;aACT;YAED,IAAI,SAAS,GAA2B,EAAE,CAAA;YAC1C,IAAI,OAAO,CAAC,OAAO,KAAK,CAAC,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE;gBAC1E,SAAS,GAAG,OAAO,CAAC,SAAS,CAAA;aAC9B;YACD,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,QAAQ,CAAA;YAEjD,UAAU,GAAG,UAAU,CAAC,MAAM,CAC5B,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACzB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG;gBAC3D,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,OAAO,UAAU,QAAQ;gBAClD,QAAQ;oBACN,uBAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;gBACrC,CAAC;aACF,CAAC,CAAC,CACJ,CAAA;SACF;QACD,OAAO,UAAU,CAAA;IACnB,CAAC;IACD,MAAM,CAAC,QAA8B;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;CACF;AAzCD,6BAyCC","sourcesContent":["import { $range, applySolution, filterMessages } from './helpers'\r\nimport type { LinterMessage, MessageSolution, ListItem } from './types'\r\nimport type { TextEditor, Point } from 'atom'\r\n\r\nexport default class Intentions {\r\n  messages: Array<LinterMessage> = []\r\n  grammarScopes: Array<string> = ['*']\r\n\r\n  getIntentions({ textEditor, bufferPosition }: { textEditor: TextEditor; bufferPosition: Point }) {\r\n    let intentions: ListItem[] = []\r\n    const messages = filterMessages(this.messages, textEditor.getPath())\r\n\r\n    for (const message of messages) {\r\n      const hasFixes = message.solutions && message.solutions.length\r\n      if (!hasFixes) {\r\n        continue\r\n      }\r\n      const range = $range(message)\r\n      const inRange = range && range.containsPoint(bufferPosition)\r\n      if (!inRange) {\r\n        continue\r\n      }\r\n\r\n      let solutions: Array<MessageSolution> = []\r\n      if (message.version === 2 && message.solutions && message.solutions.length) {\r\n        solutions = message.solutions\r\n      }\r\n      const linterName = message.linterName || 'Linter'\r\n\r\n      intentions = intentions.concat(\r\n        solutions.map(solution => ({\r\n          priority: solution.priority ? solution.priority + 200 : 200,\r\n          icon: 'tools',\r\n          title: solution.title || `Fix ${linterName} issue`,\r\n          selected() {\r\n            applySolution(textEditor, solution)\r\n          },\r\n        })),\r\n      )\r\n    }\r\n    return intentions\r\n  }\r\n  update(messages: Array<LinterMessage>) {\r\n    this.messages = messages\r\n  }\r\n}\r\n"]}