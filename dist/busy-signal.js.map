{"version":3,"file":"busy-signal.js","sourceRoot":"","sources":["../lib/busy-signal.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable } from 'atom'\r\nimport type { Linter } from './types'\r\nimport { BusySignalProvider, BusySignalRegistry } from 'atom-ide-base'\r\n\r\nexport default class BusySignal {\r\n  provider: BusySignalProvider | null | undefined\r\n  executing: Set<{\r\n    linter: Linter\r\n    filePath: string | null | undefined\r\n  }>\r\n  providerTitles: Set<string>\r\n  useBusySignal: boolean\r\n  subscriptions: CompositeDisposable\r\n\r\n  constructor() {\r\n    this.executing = new Set()\r\n    this.providerTitles = new Set()\r\n    this.subscriptions = new CompositeDisposable()\r\n\r\n    this.subscriptions.add(\r\n      atom.config.observe('linter-ui-default.useBusySignal', useBusySignal => {\r\n        this.useBusySignal = useBusySignal\r\n      }),\r\n    )\r\n  }\r\n  attach(registry: BusySignalRegistry) {\r\n    this.provider = registry.create()\r\n    this.update()\r\n  }\r\n  update() {\r\n    const provider = this.provider\r\n    if (!provider) return\r\n    if (!this.useBusySignal) return\r\n    const fileMap: Map<string | null | undefined, Array<string>> = new Map()\r\n    const currentTitles = new Set()\r\n\r\n    for (const { filePath, linter } of this.executing) {\r\n      let names = fileMap.get(filePath)\r\n      if (!names) {\r\n        fileMap.set(filePath, (names = []))\r\n      }\r\n      names.push(linter.name)\r\n    }\r\n\r\n    for (const [filePath, names] of fileMap) {\r\n      const path = filePath ? ` on ${atom.project.relativizePath(filePath)[1]}` : ''\r\n      names.forEach(name => {\r\n        const title = `${name}${path}`\r\n        currentTitles.add(title)\r\n        if (!this.providerTitles.has(title)) {\r\n          // Add the title since it hasn't been seen before\r\n          this.providerTitles.add(title)\r\n          provider.add(title)\r\n        }\r\n      })\r\n    }\r\n\r\n    // Remove any titles no longer active\r\n    this.providerTitles.forEach(title => {\r\n      if (!currentTitles.has(title)) {\r\n        provider.remove(title)\r\n        this.providerTitles.delete(title)\r\n      }\r\n    })\r\n\r\n    fileMap.clear()\r\n  }\r\n  getExecuting(linter: Linter, filePath: string | null | undefined) {\r\n    for (const entry of this.executing) {\r\n      if (entry.linter === linter && entry.filePath === filePath) {\r\n        return entry\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  didBeginLinting(linter: Linter, filePath: string | null | undefined) {\r\n    if (this.getExecuting(linter, filePath)) {\r\n      return\r\n    }\r\n    this.executing.add({ linter, filePath })\r\n    this.update()\r\n  }\r\n  didFinishLinting(linter: Linter, filePath: string | null | undefined) {\r\n    const entry = this.getExecuting(linter, filePath)\r\n    if (entry) {\r\n      this.executing.delete(entry)\r\n      this.update()\r\n    }\r\n  }\r\n  dispose() {\r\n    if (this.provider) {\r\n      this.provider.clear()\r\n    }\r\n    this.providerTitles.clear()\r\n    this.executing.clear()\r\n    this.subscriptions.dispose()\r\n  }\r\n}\r\n"]}