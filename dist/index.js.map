{"version":3,"file":"index.js","sourceRoot":"","sources":["../lib/index.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA6B;AAM7B,MAAM,aAAa,GAAmC,IAAI,GAAG,EAAE,CAAA;AAE/D,MAAM,SAAS,GAAkB,IAAI,GAAG,EAAE,CAAA;AAC1C,IAAI,cAAkC,CAAA;AACtC,IAAI,iBAAoC,CAAA;AAExC,SAAgB,QAAQ;IACtB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iCAAiC,CAAC,EAAE;QAEtD,CAAC;QAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,mBAAmB,CAAkB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;KACpH;IAED,MAAM,UAAU,GAAG,MAAM,CAAC,mBAAmB,CAAC,SAAS,0BAA0B;QAC/E,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAA;YAChD,OAAO,CAAC,mBAAmB,CAAC,CAAA;SAC7B;IACH,CAAC,CAAC,CAAA;IACF,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;AAC/B,CAAC;AAdD,4BAcC;AAED,SAAgB,UAAU;IACxB,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAA;IAC1E,aAAa,CAAC,KAAK,EAAE,CAAA;IACrB,KAAK,MAAM,KAAK,IAAI,SAAS,EAAE;QAC7B,KAAK,CAAC,OAAO,EAAE,CAAA;KAChB;IACD,SAAS,CAAC,KAAK,EAAE,CAAA;AACnB,CAAC;AAPD,gCAOC;AAED,SAAgB,SAAS;IACvB,MAAM,QAAQ,GAAG,IAAI,cAAQ,EAAE,CAAA;IAC/B,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IACvB,IAAI,cAAc,EAAE;QAClB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;KACvC;IACD,OAAO,QAAQ,CAAA;AACjB,CAAC;AAPD,8BAOC;AAGD,SAAgB,iBAAiB;IAC/B,OAAO,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;AAC7D,CAAC;AAFD,8CAEC;AAED,SAAgB,aAAa,CAAC,aAAiC;IAC7D,cAAc,GAAG,aAAa,CAAA;IAC9B,SAAS,CAAC,OAAO,CAAC,UAAU,QAAQ;QAClC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;IACxC,CAAC,CAAC,CAAA;AACJ,CAAC;AALD,sCAKC;AAED,SAAgB,gBAAgB,CAAC,gBAAmC;IAClE,iBAAiB,GAAG,gBAAgB,CAAA;IACpC,SAAS,CAAC,OAAO,CAAC,UAAU,QAAQ;QAClC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAA;IAC9C,CAAC,CAAC,CAAA;AACJ,CAAC;AALD,4CAKC","sourcesContent":["import LinterUI from './main'\r\nimport type Intentions from './intentions'\r\nimport type { /* IntentionsListProvider, */ RequestIdleCallbackHandle, PackageExtra } from './types'\r\nimport type { StatusBar as StatusBarRegistry } from 'atom/status-bar'\r\nimport type { BusySignalRegistry } from 'atom-ide-base'\r\n\r\nconst idleCallbacks: Set<RequestIdleCallbackHandle> = new Set()\r\n\r\nconst instances: Set<LinterUI> = new Set()\r\nlet signalRegistry: BusySignalRegistry\r\nlet statusBarRegistry: StatusBarRegistry\r\n\r\nexport function activate() {\r\n  if (atom.config.get('linter-ui-default.useBusySignal')) {\r\n    // This is a necessary evil, see steelbrain/linter#1355\r\n    ;(atom.packages.getLoadedPackage('linter-ui-default') as PackageExtra).metadata['package-deps'].push('busy-signal')\r\n  }\r\n\r\n  const callbackID = window.requestIdleCallback(function installLinterUIDefaultDeps() {\r\n    idleCallbacks.delete(callbackID)\r\n    if (!atom.inSpecMode()) {\r\n      const { install } = require('atom-package-deps')\r\n      install('linter-ui-default')\r\n    }\r\n  })\r\n  idleCallbacks.add(callbackID)\r\n}\r\n\r\nexport function deactivate() {\r\n  idleCallbacks.forEach(callbackID => window.cancelIdleCallback(callbackID))\r\n  idleCallbacks.clear()\r\n  for (const entry of instances) {\r\n    entry.dispose()\r\n  }\r\n  instances.clear()\r\n}\r\n\r\nexport function provideUI(): LinterUI {\r\n  const instance = new LinterUI()\r\n  instances.add(instance)\r\n  if (signalRegistry) {\r\n    instance.signal.attach(signalRegistry)\r\n  }\r\n  return instance\r\n}\r\n\r\n// TODO: use IntentionsListProvider as the return type\r\nexport function provideIntentions(): Array<Intentions> {\r\n  return Array.from(instances).map(entry => entry.intentions)\r\n}\r\n\r\nexport function consumeSignal(signalService: BusySignalRegistry) {\r\n  signalRegistry = signalService\r\n  instances.forEach(function (instance) {\r\n    instance.signal.attach(signalRegistry)\r\n  })\r\n}\r\n\r\nexport function consumeStatusBar(statusBarService: StatusBarRegistry) {\r\n  statusBarRegistry = statusBarService\r\n  instances.forEach(function (instance) {\r\n    instance.statusBar.attach(statusBarRegistry)\r\n  })\r\n}\r\n"]}